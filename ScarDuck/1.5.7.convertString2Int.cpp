

/*
copyright@nciaebupt 转载请注明出处
题目：输入一个表示整数的字符串，把该字符串转换成整数并输出。例如输入字符串"345"，
则输出整数345。
分析：这道题尽管不是很难，学过C/C++语言一般都能实现基本功能，但
不同程序员就这道题写出的代码有很大区别，可以说这道题能够很好地反应出程序员的思维
和编程习惯，因此已经被包括微软在内的多家公司用作面试题。建议读者在往下看之前自己
先编写代码，再比较自己写的代码和下面的参考代码有哪些不同。
首先我们分析如何完成基本功能，即如何把表示整数的字符串正确地转换成整数。还是以
"345"作为例子。当我们扫描到字符串的第一个字符'3'时，我们不知道后面还有多少位，仅
仅知道这是第一位，因此此时得到的数字是3。当扫描到第二个数字'4'时，此时我们已经知
道前面已经一个3了，再在后面加上一个数字4，那前面的3相当于30，因此得到的数字是
3*10+4=34。接着我们又扫描到字符'5'，我们已经知道了'5'的前面已经有了34，由于后面要
加上一个5，前面的34就相当于340了，因此得到的数字就是34*10+5=345。
分析到这里，我们不能得出一个转换的思路：每扫描到一个字符，我们把在之前得到的数字
乘以10再加上当前字符表示的数字。这个思路用循环不难实现。
由于整数可能不仅仅之含有数字，还有可能以'+'或者'-'开头，表示整数的正负。因此我们需
要把这个字符串的第一个字符做特殊处理。如果第一个字符是'+'号，则不需要做任何操作；
如果第一个字符是'-'号，则表明这个整数是个负数，在最后的时候我们要把得到的数值变成
负数。
接着我们试着处理非法输入。由于输入的是指针，在使用指针之前，我们要做的第一件是判
断这个指针是不是为空。如果试着去访问空指针，将不可避免地导致程序崩溃。另外，输入
的字符串中可能含有不是数字的字符。每当碰到这些非法的字符，我们就没有必要再继续转
换。最后一个需要考虑的问题是溢出问题。由于输入的数字是以字符串的形式输入，因此有
可能输入一个很大的数字转换之后会超过能够表示的最大的整数而溢出。
*/
#include <cstdlib>
#include <iostream>

bool str2Int(char * str, int & num){
  if(str == NULL) return false;
  char * cur = str;
  int res = 0;
  int flag = 1;
  if(cur != NULL && *cur == '-'){
    flag = -1;
    cur++;
  }
  else if(cur != NULL && *cur == '+'){
    flag = 1;
    cur++;
  }
  while(cur != NULL && *cur != '\0'){
    if(*cur < '0' || *cur > '9'){
      return false;
    }
    int lastbit = *cur - '0';
    res = res*10 + lastbit;
    cur++;
  }
  res = flag*res;
  num = res;
  return true;
}

int main(int argc, char ** argv){
  char str[] = "345";
  int num = 0;

  str2Int(str, num);

  std::cout<<num<<std::endl;

  system("pause");
  return 0;
}













